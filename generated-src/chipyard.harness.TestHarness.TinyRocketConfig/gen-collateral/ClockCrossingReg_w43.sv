// Generated by CIRCT firtool-1.75.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module ClockCrossingReg_w43(	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
  input         clock,	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
  input  [42:0] io_d,	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:195:14]
  output [42:0] io_q,	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:195:14]
  input         io_en	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:195:14]
);

  reg [42:0] cdc_reg;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:201:76]
  always @(posedge clock) begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
    if (io_en)	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:195:14]
      cdc_reg <= io_d;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:201:76]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
    initial begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
        `INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
        end	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
        cdc_reg = {_RANDOM[1'h0], _RANDOM[1'h1][10:0]};	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7, :201:76]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = cdc_reg;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:191:7, :201:76]
endmodule

