// Generated by CIRCT firtool-1.75.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module GenericSerializer_TLBeatw88_f32(	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
  input         clock,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
  input         reset,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
  output        io_in_ready,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  input         io_in_valid,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  input  [85:0] io_in_bits_payload,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  input         io_in_bits_head,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  input         io_in_bits_tail,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  input         io_out_ready,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  output        io_out_valid,	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
  output [31:0] io_out_bits_flit	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:10:14]
);

  wire [0:0][31:0] _GEN = '{32'h0};
  reg  [31:0]      data_1;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17]
  reg  [31:0]      data_2;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17]
  reg  [1:0]       beat;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:20:21]
  wire             _io_out_bits_flit_T = beat == 2'h0;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :20:21, :22:39]
  wire [2:0]       _GEN_0 = {io_in_valid, beat};	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:20:21, :23:{31,39}]
  wire [3:0][31:0] _GEN_1 = {_GEN, {{data_2}, {data_1}, {32'h0}}};	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17, :24:26]
  wire             _GEN_2 = io_out_ready & (|_GEN_0);	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:23:{31,39}, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  always @(posedge clock) begin	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
    if (_GEN_2 & _io_out_bits_flit_T) begin	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17, :22:39, :26:22, :28:25, :29:12, src/main/scala/chisel3/util/Decoupled.scala:51:35]
      data_1 <= io_in_bits_payload[61:30];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17, :29:34]
      data_2 <= {8'h0, io_in_bits_payload[85:62]};	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:19:17, :29:34]
    end
    if (reset)	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
      beat <= 2'h0;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :20:21]
    else if (_GEN_2)	// @[src/main/scala/chisel3/util/Decoupled.scala:51:35]
      beat <= beat == 2'h2 ? 2'h0 : beat + 2'h1;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :20:21, :27:{16,22,53}]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
    initial begin	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
        `INIT_RANDOM_PROLOG_	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
        end	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
        data_1 = _RANDOM[2'h1];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :19:17]
        data_2 = _RANDOM[2'h2];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :19:17]
        beat = _RANDOM[2'h3][1:0];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :20:21]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_out_ready & _io_out_bits_flit_T;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :22:{31,39}]
  assign io_out_valid = |_GEN_0;	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :23:{31,39}]
  assign io_out_bits_flit = _io_out_bits_flit_T ? {io_in_bits_payload[29:0], io_in_bits_head, io_in_bits_tail} : _GEN_1[beat];	// @[generators/testchipip/src/main/scala/serdes/Serdes.scala:8:7, :20:21, :22:39, :24:{26,52}]
endmodule

