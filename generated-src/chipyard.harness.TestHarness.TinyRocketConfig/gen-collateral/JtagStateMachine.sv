// Generated by CIRCT firtool-1.75.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module JtagStateMachine(	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
  input        clock,	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
  input        reset,	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
  input        io_tms,	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:75:14]
  output [3:0] io_currState	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:75:14]
);

  reg  [3:0]       currState;	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:78:26]
  wire [15:0][3:0] _GEN = {{io_tms ? 4'hF : 4'hC}, {io_tms ? 4'h9 : 4'hA}, {io_tms ? 4'h7 : 4'hC}, {io_tms ? 4'h7 : 4'hC}, {io_tms ? 4'h8 : 4'hB}, {io_tms ? 4'h9 : 4'hA}, {io_tms ? 4'hD : 4'hB}, {io_tms ? 4'hD : 4'hA}, {{2'h1, ~io_tms, 1'h0}}, {io_tms ? 4'h1 : 4'h2}, {io_tms ? 4'h7 : 4'hC}, {{3'h7, io_tms}}, {io_tms ? 4'h0 : 4'h3}, {io_tms ? 4'h1 : 4'h2}, {io_tms ? 4'h5 : 4'h3}, {io_tms ? 4'h5 : 4'h2}};	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7, :77:27, :80:22, :82:{17,23}, :85:{17,23}, :88:{17,23}, :91:{17,23}, :94:{17,23}, :97:{17,23}, :100:{17,23}, :103:{17,23}, :106:{17,23}, :109:{17,23}, :112:{17,23}, :115:{17,23}, :118:{17,23}, :121:{17,23}, :124:{17,23}, :127:{17,23}]
  always @(posedge clock or posedge reset) begin	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
    if (reset)	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      currState <= 4'hF;	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:78:26]
    else	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      currState <= _GEN[currState];	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:77:27, :78:26, :80:22, :82:17, :85:17, :88:17, :91:17, :94:17, :97:17, :100:17, :103:17, :106:17, :109:17, :112:17, :115:17, :118:17, :121:17, :124:17, :127:17]
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
    initial begin	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
        `INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
        currState = _RANDOM[/*Zero width*/ 1'b0][3:0];	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7, :78:26]
      `endif // RANDOMIZE_REG_INIT
      if (reset)	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
        currState = 4'hF;	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:78:26]
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_currState = currState;	// @[generators/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:70:7, :78:26]
endmodule

