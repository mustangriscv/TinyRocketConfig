// Generated by CIRCT firtool-1.75.0

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_
module UARTAdapter(	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:26:7]
  input  clock,	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:26:7]
  input  reset,	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:26:7]
  input  io_uart_txd,	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:28:14]
  output io_uart_rxd	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:28:14]
);

  wire       _rxq_io_enq_ready;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
  wire       _rxq_io_deq_valid;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
  wire [7:0] _rxq_io_deq_bits;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
  wire [3:0] _rxq_io_count;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
  wire       _rxm_io_in_ready;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:37:19]
  wire       _txq_io_enq_ready;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
  wire       _txq_io_deq_valid;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
  wire [7:0] _txq_io_deq_bits;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
  wire       _txm_io_out_valid;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
  wire [7:0] _txm_io_out_bits;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
  wire       _sim_serial_in_valid;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
  wire [7:0] _sim_serial_in_bits;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
  wire       _sim_serial_out_ready;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
  `ifndef SYNTHESIS	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
    always @(posedge clock) begin	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
      if (_txm_io_out_valid & ~reset & ~_txq_io_enq_ready) begin	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19, :36:19, :48:35]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
          $error("Assertion failed\n    at SimUART.scala:48 when (txq.io.enq.valid) { assert(txq.io.enq.ready) }\n");	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
        if (`STOP_COND_)	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
          $fatal;	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:48:35]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  SimUART #(
    .FORCEPTY(0),
    .UARTNO(0)
  ) sim (	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
    .clock            (clock),
    .reset            (reset),
    .serial_in_ready  (_rxq_io_enq_ready & _rxq_io_count < 4'h7),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19, :62:{46,62}]
    .serial_in_valid  (_sim_serial_in_valid),
    .serial_in_bits   (_sim_serial_in_bits),
    .serial_out_ready (_sim_serial_out_ready),
    .serial_out_valid (_txq_io_deq_valid),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
    .serial_out_bits  (_txq_io_deq_bits)	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
  );	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
  UARTRx txm (	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
    .clock        (clock),
    .reset        (reset),
    .io_en        (1'h1),
    .io_in        (io_uart_txd),
    .io_out_valid (_txm_io_out_valid),
    .io_out_bits  (_txm_io_out_bits),
    .io_div       (16'h364)
  );	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
  Queue8_UInt8 txq (	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_txq_io_enq_ready),
    .io_enq_valid (_txm_io_out_valid),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
    .io_enq_bits  (_txm_io_out_bits),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:35:19]
    .io_deq_ready (_sim_serial_out_ready),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (_txq_io_deq_bits),
    .io_count     (/* unused */)
  );	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:36:19]
  UARTTx rxm (	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:37:19]
    .clock       (clock),
    .reset       (reset),
    .io_en       (1'h1),
    .io_in_ready (_rxm_io_in_ready),
    .io_in_valid (_rxq_io_deq_valid),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
    .io_in_bits  (_rxq_io_deq_bits),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
    .io_out      (io_uart_rxd),
    .io_div      (16'h364),
    .io_nstop    (1'h0)
  );	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:37:19]
  Queue8_UInt8 rxq (	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_rxq_io_enq_ready),
    .io_enq_valid (_sim_serial_in_valid),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
    .io_enq_bits  (_sim_serial_in_bits),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:32:19]
    .io_deq_ready (_rxm_io_in_ready),	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:37:19]
    .io_deq_valid (_rxq_io_deq_valid),
    .io_deq_bits  (_rxq_io_deq_bits),
    .io_count     (_rxq_io_count)
  );	// @[generators/testchipip/src/main/scala/uart/SimUART.scala:38:19]
endmodule

